interface VulnerabilityPattern {
  type: string;
  patterns: {
    text: string;
    weight: number;  // 0-1, will be multiplied by base certainty
    contextPatterns?: string[];  // Additional context that increases confidence
  }[];
  baseCertainty: number;
}

const VULNERABILITY_PATTERNS: VulnerabilityPattern[] = [
  {
    type: "Prototype Pollution",
    patterns: [
      { 
        text: "prototype pollution",
        weight: 1
      },
      { 
        text: "__proto__",
        weight: 0.9,
        contextPatterns: ["object", "prototype", "extend"]
      },
      { 
        text: "Object\\.prototype",
        weight: 0.9,
        contextPatterns: ["extend", "pollution"]
      },
      {
        text: "extend.*native.*prototype",
        weight: 0.95
      }
    ],
    baseCertainty: 90
  },
  {
    type: "Cross-Site Scripting (XSS)",
    patterns: [
      {
        text: "cross.?site scripting|xss",
        weight: 1
      },
      {
        text: "html.*untrusted|execute.*untrusted|DOM manipulation.*untrusted",
        weight: 0.9,
        contextPatterns: ["sanitiz", "input", "execute"]
      }
    ],
    baseCertainty: 75  // Primary web vulnerability
  },
  {
    type: "Remote Code Execution (RCE)",
    patterns: [
      {
        text: "remote.*code.*execution|rce",
        weight: 1
      },
      {
        text: "execute arbitrary code",
        weight: 0.9,
        contextPatterns: ["remote", "network", "server"]
      },
      // Add new patterns
      {
        text: "allows remote attackers",
        weight: 0.85,
        contextPatterns: ["execute", "run", "code", "command"]
      },
      {
        text: "(execute|run).*(code|command).*remote",
        weight: 0.85,
        contextPatterns: ["attacker", "malicious", "arbitrary"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "SQL Injection (SQLi)",
    patterns: [
      {
        text: "sql injection|sqli",
        weight: 1
      },
      {
        text: "sql.*command.*injection",
        weight: 0.9,
        contextPatterns: ["database", "query", "parameter"]
      },
      {
        text: "database.*query.*manipulation",
        weight: 0.85,
        contextPatterns: ["user input", "sanitization"]
      }
    ],
    baseCertainty: 75  // Primary database vulnerability
  },
  {
    type: "Buffer Overflow",
    patterns: [
      {
        text: "buffer overflow|buffer overrun",
        weight: 1
      },
      {
        text: "(write|read) beyond.*(buffer|boundary|memory)",
        weight: 0.9,
        contextPatterns: ["memory", "allocation", "bounds"]
      },
      {
        text: "out.?of.?bounds (write|access)",
        weight: 0.95,
        contextPatterns: ["memory", "array", "buffer"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Authentication Bypass",
    patterns: [
      {
        text: "authentication bypass",
        weight: 1
      },
      {
        text: "bypass.*(authentication|login|security)",
        weight: 0.9,
        contextPatterns: ["credentials", "authentication", "login"]
      },
      {
        text: "(circumvent|skip).*(authentication|verification)",
        weight: 0.85,
        contextPatterns: ["security", "authorization"]
      },
      {
        text: "hijack.*(authentication|session)",
        weight: 0.9,
        contextPatterns: ["administrator", "user", "auth"]
      }
    ],
    baseCertainty: 70  // Security control bypass
  },
  {
    type: "Information Disclosure",
    patterns: [
      {
        text: "information disclosure|data leak",
        weight: 1
      },
      {
        text: "(sensitive|confidential).*(data|information).*(exposure|disclosure)",
        weight: 0.9,
        contextPatterns: ["private", "sensitive", "unauthorized"]
      },
      {
        text: "expose.*(sensitive|private).*data",
        weight: 0.85,
        contextPatterns: ["disclosure", "unauthorized access"]
      }
    ],
    baseCertainty: 65  // Information leakage
  },
  {
    type: "Server-Side Request Forgery (SSRF)",
    patterns: [
      {
        text: "ssrf|server.?side request forgery",
        weight: 1
      },
      {
        text: "forge.*server.*request",
        weight: 0.9,
        contextPatterns: ["internal", "network", "request"]
      },
      {
        text: "(internal|request).*(network|service).*access",
        weight: 0.85,
        contextPatterns: ["url", "endpoint", "request"]
      }
    ],
    baseCertainty: 90
  },
  {
    type: "XML External Entity (XXE)",
    patterns: [
      {
        text: "xxe|xml external entity",
        weight: 1
      },
      {
        text: "xml.*(parsing|processing).*vulnerability",
        weight: 0.9,
        contextPatterns: ["entity", "external", "xml"]
      },
      {
        text: "external.*entity.*reference",
        weight: 0.85,
        contextPatterns: ["xml", "dtd", "parsing"]
      }
    ],
    baseCertainty: 90
  },
  {
    type: "Denial-of-service (DoS)",
    patterns: [
      {
        text: "denial.?of.?service|dos attack",
        weight: 1
      },
      {
        text: "(service|system|application).*(crash|unavailable|overwhelm)",
        weight: 0.9,
        contextPatterns: ["resource", "consumption", "availability"]
      },
      {
        text: "resource.*(exhaustion|depletion)",
        weight: 0.85,
        contextPatterns: ["memory", "cpu", "bandwidth"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Cross-Site Request Forgery (CSRF)",
    patterns: [
      {
        text: "csrf|cross.?site request forgery",
        weight: 1
      },
      {
        text: "hijack.*authentication",
        weight: 0.9,
        contextPatterns: ["request", "POST", "URI", "administrator", "manipulate"]
      },
      {
        text: "(forge|manipulate).*request",
        weight: 0.85,
        contextPatterns: ["authentication", "session", "POST"]
      }
    ],
    baseCertainty: 90
  },
  {
    type: "Application Deployment",
    patterns: [
      {
        text: "application deployment|deploy",
        weight: 0.85,
        contextPatterns: ["manager", "administrator", "application"]
      }
    ],
    baseCertainty: 80
  },
  {
    type: "Improper Access Control",
    patterns: [
      {
        text: "access control|authorization",
        weight: 0.9
      },
      {
        text: "(manipulate|unauthorized).*(access|request)",
        weight: 0.85,
        contextPatterns: ["administrator", "privilege", "permission"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Code Injection",
    patterns: [
      {
        text: "code injection|execute.*code",
        weight: 1
      },
      {
        text: "inject.*arbitrary code",
        weight: 0.9,
        contextPatterns: ["execution", "injection", "malicious"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Command Injection",
    patterns: [
      {
        text: "command injection|execute.*command",
        weight: 1
      },
      {
        text: "shell.*command.*execution",
        weight: 0.9,
        contextPatterns: ["system", "shell", "command"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Directory Traversal",
    patterns: [
      {
        text: "directory traversal|path traversal",
        weight: 1
      },
      {
        text: "\\.\\./|\\.\\./|access.*directory",
        weight: 0.9,
        contextPatterns: ["file", "path", "directory"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Cryptographic Issues",
    patterns: [
      {
        text: "weak.*cryptograph|broken.*crypto",
        weight: 1
      },
      {
        text: "(insufficient|inadequate).*(encryption|crypto)",
        weight: 0.9,
        contextPatterns: ["algorithm", "key", "encryption"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Missing Authorization",
    patterns: [
      {
        text: "missing authorization|unauthorized access",
        weight: 1
      },
      {
        text: "lack.*permission check",
        weight: 0.9,
        contextPatterns: ["access", "control", "permission"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Race Condition",
    patterns: [
      {
        text: "race condition|time.?of.?check",
        weight: 1
      },
      {
        text: "concurrent.*access",
        weight: 0.9,
        contextPatterns: ["race", "timing", "concurrent"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Use After Free",
    patterns: [
      {
        text: "use after free|dangling pointer",
        weight: 1
      },
      {
        text: "memory.*deallocated",
        weight: 0.9,
        contextPatterns: ["pointer", "memory", "free"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Uncontrolled Resource Consumption",
    patterns: [
      {
        text: "resource.*consumption|memory leak",
        weight: 1
      },
      {
        text: "(excessive|uncontrolled).*(memory|cpu|disk)",
        weight: 0.9,
        contextPatterns: ["resource", "consumption", "exhaustion"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Missing Encryption",
    patterns: [
      {
        text: "missing encryption|unencrypted data",
        weight: 1
      },
      {
        text: "(sensitive|confidential).*data.*plaintext",
        weight: 0.9,
        contextPatterns: ["encryption", "sensitive", "protection"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Improper Input Validation",
    patterns: [
      {
        text: "input validation|validate input",
        weight: 1
      },
      {
        text: "(missing|insufficient).*validation",
        weight: 0.9,
        contextPatterns: ["input", "sanitization", "validation"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Insecure Direct Object References",
    patterns: [
      {
        text: "direct object reference|idor",
        weight: 1
      },
      {
        text: "(access|modify).*unauthorized.*resource",
        weight: 0.9,
        contextPatterns: ["parameter", "id", "reference"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Security Misconfiguration",
    patterns: [
      {
        text: "security misconfiguration|misconfigured security",
        weight: 1
      },
      {
        text: "(default|insecure|weak).*configuration",
        weight: 0.9,
        contextPatterns: ["setup", "settings", "config"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Integer Overflow",
    patterns: [
      {
        text: "integer overflow|arithmetic overflow|numeric overflow",
        weight: 1
      },
      {
        text: "(calculation|arithmetic|numeric).*overflow",
        weight: 0.95,
        contextPatterns: ["buffer", "memory", "integer", "size", "length", "value"]
      },
      {
        text: "(malformed|invalid).*(size|length|value)",
        weight: 0.9,
        contextPatterns: ["parse", "conversion", "numeric", "integer", "overflow"]
      },
      {
        text: "overflow.*(size|length|value)",
        weight: 0.9,
        contextPatterns: ["integer", "numeric", "parse", "calculation"]
      },
      {
        text: "(parse|convert).*(numeric|integer|value)",
        weight: 0.85,
        contextPatterns: ["overflow", "malformed", "invalid", "size"]
      },
      {
        text: "(chunk|packet|buffer).*(size|length)",
        weight: 0.85,
        contextPatterns: ["overflow", "numeric", "integer", "malformed"]
      }
    ],
    baseCertainty: 90  // Increased from 85 to 90
  },
  {
    type: "Open Redirect",
    patterns: [
      {
        text: "open redirect|unvalidated redirect",
        weight: 1
      },
      {
        text: "(redirect|forward).*validation",
        weight: 0.9,
        contextPatterns: ["url", "destination", "target"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Path Manipulation",
    patterns: [
      {
        text: "path manipulation|directory manipulation",
        weight: 1
      },
      {
        text: "(file|directory).*access.*manipulation",
        weight: 0.9,
        contextPatterns: ["path", "traverse", "filesystem"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Insufficient Logging",
    patterns: [
      {
        text: "insufficient logging|missing audit",
        weight: 1
      },
      {
        text: "(log|audit|track).*security.*event",
        weight: 0.9,
        contextPatterns: ["monitoring", "activity", "audit"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Memory Leak",
    patterns: [
      {
        text: "memory leak|resource leak",
        weight: 1
      },
      {
        text: "(memory|resource).*not.*freed",
        weight: 0.9,
        contextPatterns: ["allocation", "deallocation", "cleanup"]
      }
    ],
    baseCertainty: 85
  },
  {
    type: "Format String",
    patterns: [
      {
        text: "format string|string format",
        weight: 1
      },
      {
        text: "(printf|sprintf|format).*vulnerability",
        weight: 0.9,
        contextPatterns: ["string", "input", "format"]
      }
    ],
    baseCertainty: 85
  }
];

export const DEFAULT_VULNERABILITY_TYPES = [
  "-",
    "Authentication Bypass",
    "Buffer Overflow",
    "Code Injection",
    "Command Injection",
    "Creation of Temporary File With Insecure Permissions",
    "Cross-Frame Scripting (XFS)",
    "Cross-Site Request Forgery (CSRF)",
    "Cross-Site scripting (XSS)",
    "Cross-origin Resource Sharing",
    "Cryptographic Issues",
    "DNS Response Spoofing",
    "Denial of service (DoS)",
    "Denial-of-service (DoS)",
    "Directory Traversal",
    "Distributed Denial-of-service (DDoS)",
    "Download of Code Without Integrity Check",
    "Execution with Unnecessary Privileges",
    "Exposure of Resource to Wrong Sphere",
    "Exposure of Sensitive Information to an Unauthorized Actor",
    "Failure to Constrain Operations within the Bounds of a Memory Buffer",
    "Failure to Drop Privileges",
    "Failure to Encrypt Sensitive Traffic",
    "Failure to Handle Missing or Unexpected Data",
    "Failure to Preserve Web Page Structure",
    "Failure to Protect Stored Data from Modification",
    "Failure to Provide Confidentiality",
    "Failure to Provide Privacy Notice",
    "HTTP Request Smuggling",
    "Heap-based Buffer Overflow",
    "Improper Access Control",
    "Improper Certificate Validation",
    "Improper Check for Dropped Privileges",
    "Improper Check for Unusual or Exceptional Conditions",
    "Improper Control of Generation of Code",
    "Improper Control of a Resource Through its Lifetime",
    "Improper Enforcement of Message or Data Structure",
    "Improper Handling of Length Parameter Inconsistency",
    "Improper Initialization",
    "Improper Input Validation",
    "Improper Limitation of a Pathname to a Restricted Directory",
    "Improper Neutralization of Special Elements used in an SQL Command",
    "Improper Privilege Management",
    "Improper Resource Shutdown or Release",
    "Improper Restriction of Excessive Authentication Attempts",
    "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "Improper Restriction of XML External Entity Reference",
    "Improper Sanitization of HTML Tags",
    "Improper Use of Regular Expression",
    "Improper Validation of Array Index",
    "Improper Validation of SSL/TLS Certificates",
    "Improper Verification of Cryptographic Signature",
    "Improper Verification of Integrity Check Value",
    "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
    "Improperly Implemented Security Check for Standard",
    "Inadequate Encryption Strength",
    "Injection",
    "Information Disclosure",
    "Inclusion of Functionality from Untrusted Control Sphere",
    "Inclusion of Sensitive Information in Log Files",
    "Incorrect Behavior Order: Early Amplification",
    "Incorrect Behavior Order: Validate Before Canonicalize",
    "Incorrect Default Permissions",
    "Incorrect Permission Assignment for Critical Resource",
    "Incorrect Type Conversion or Cast",
    "Infinite Loop",
    "Information Exposure Through an Error Message",
    "Input Validation Vulnerability",
    "Insecure Default Configuration",
    "Insecure Direct Object References",
    "Insecure Storage of Sensitive Information",
    "Insufficient Entropy",
    "Insufficient Process Isolation",
    "Insufficient Session Expiration",
    "Insufficient Verification of Data Authenticity",
    "Insufficiently Protected Backup",
    "Insufficiently Protected Credentials",
    "Integer Overflow or Wraparound",
    "Integer Underflow (Wrap or Wraparound)",
    "Lack of Necessary Functionality in a Security Mechanism",
    "Lack of User Control Over Privacy Settings",
    "Local File Inclusion",
    "Memory Corruption Vulnerability",
    "Microsoft Exchange Information Disclosure Vulnerability",
    "Missing Authentication for Critical Function",
    "Missing Authorization",
    "Missing Encryption of Sensitive Data",
    "Missing Function Level Access Control",
    "Missing Password Change Function",
    "Missing Protection Mechanism",
    "Missing Release of Resource after Effective Lifetime",
    "Missing Security Headers",
    "Null Pointer Dereference",
    "Open Redirect vulnerability",
    "Out-of-bounds Read",
    "Out-of-bounds Write",
    "Outlook Web App Token Spoofing Vulnerability",
    "Password in Configuration File",
    "Path Traversal",
    "Prototype Pollution",
    "Race Condition",
    "Race Conditions",
    "Relative Path Traversal",
    "Remote Code Excecution (RCE)",
    "Remote File Inclusion",
    "SMTP Memory Allocation Vulnerability",
    "SQL Injection (SQLi)",
    "Security Misconfiguration",
    "Server-Side Request Forgery (SSRF)",
    "Stack-based Buffer Overflow",
    "Storing Passwords in a Recoverable Format",
    "Uncontrolled Format String",
    "Uncontrolled Resource Consumption",
    "Unnecessary Exposure of Information",
    "Unprotected Transport of Credentials",
    "Unrestricted Upload of File with Dangerous Type",
    "Untrusted Initialization",
    "Untrusted Search Path",
    "Unvalidated Redirects and Forwards",
    "Use After Free",
    "Use of Hard-coded Password",
    "Use of Insufficiently Random Values",
    "Use of Potentially Dangerous Function",
    "Use of a Broken or Risky Cryptographic Algorithm",
    "Weak Password Policy",
    "Weak Password Recovery Mechanism for Forgotten Password",
    "Weak Password Requirements",
    "XML External Entity (XXE)",
    "Plaintext Injection",
    "Privilege Escalation",
    "HTTP Response Splitting"
];

export function analyzeVulnerability(description: string): Array<{ type: string; certainty: number }> {
  const matches = new Map<string, number>();
  const lowerDesc = description.toLowerCase();

  VULNERABILITY_PATTERNS.forEach(vulnType => {
    let maxCertainty = 0;
    
    vulnType.patterns.forEach(pattern => {
      const regex = new RegExp(pattern.text, 'i');
      if (regex.test(description)) {
        let certainty = vulnType.baseCertainty * pattern.weight;
        
        // Enhanced context matching with wider scoring range
        if (pattern.contextPatterns) {
          const contextMatches = pattern.contextPatterns.filter(ctx => 
            new RegExp(ctx, 'i').test(description)
          ).length;
          
          if (contextMatches > 0) {
            // Calculate bonus based on number of context matches
            const matchRatio = contextMatches / pattern.contextPatterns.length;
            const contextBonus = matchRatio * 25; // Up to 25 point bonus for context
            certainty += contextBonus;

            // Additional boost for strong context matches
            if (matchRatio > 0.7) {
              certainty += 10; // Extra boost for having most context indicators
            }
          }
        }

        // Adjust certainty based on pattern weight
        if (pattern.weight === 1) {
          certainty = Math.max(certainty, 75); // Direct matches get minimum 75
        }
        
        maxCertainty = Math.max(maxCertainty, certainty);
      }
    });

    if (maxCertainty > 0) {
      matches.set(vulnType.type, maxCertainty);
    }
  });

  return Array.from(matches.entries())
    .map(([type, certainty]) => ({ 
      type, 
      certainty: Math.min(Math.round(certainty), 100)
    }))
    .filter(m => m.certainty >= 50) // Only return matches with 50+ certainty
    .sort((a, b) => b.certainty - a.certainty);
}
